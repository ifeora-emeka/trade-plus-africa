<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/api/public/admin/auth/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/public/admin/auth/route.ts" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from &quot;next/server&quot;&#10;import { z } from &quot;zod&quot;&#10;&#10;const loginSchema = z.object({&#10;  email: z.string().email(&quot;Invalid email format&quot;),&#10;  password: z.string().min(1, &quot;Password is required&quot;),&#10;})&#10;&#10;const ADMIN_CREDENTIALS = {&#10;  email: &quot;admin@tradepulse.ng&quot;,&#10;  password: &quot;TradePulse2024!&quot;,&#10;}&#10;&#10;export async function POST(request: NextRequest) {&#10;  try {&#10;    const body = await request.json()&#10;    &#10;    const validation = loginSchema.safeParse(body)&#10;    &#10;    if (!validation.success) {&#10;      return NextResponse.json(&#10;        { &#10;          error: &quot;Validation failed&quot;, &#10;          details: validation.error.errors &#10;        },&#10;        { status: 400 }&#10;      )&#10;    }&#10;&#10;    const { email, password } = validation.data&#10;&#10;    if (email !== ADMIN_CREDENTIALS.email || password !== ADMIN_CREDENTIALS.password) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid credentials&quot; },&#10;        { status: 401 }&#10;      )&#10;    }&#10;&#10;    const response = NextResponse.json(&#10;      { message: &quot;Login successful&quot;, user: { email } },&#10;      { status: 200 }&#10;    )&#10;&#10;    const authToken = Buffer.from(`${email}:${Date.now()}`).toString('base64')&#10;&#10;    response.cookies.set(&quot;auth-token&quot;, authToken, {&#10;      httpOnly: true,&#10;      secure: process.env.NODE_ENV === &quot;production&quot;,&#10;      sameSite: &quot;lax&quot;,&#10;      maxAge: 60 * 60 * 24 * 7,&#10;      path: &quot;/&quot;,&#10;    })&#10;&#10;    return response&#10;  } catch (error) {&#10;    return NextResponse.json(&#10;      { error: &quot;Internal server error&quot; },&#10;      { status: 500 }&#10;    )&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { Header } from &quot;@/components/header&quot;&#10;import { Hero } from &quot;@/components/hero&quot;&#10;import { PopularItems } from &quot;@/components/popular-items&quot;&#10;&#10;export default function HomePage() {&#10;  const handleSearch = (query: string) =&gt; {&#10;    console.log(&quot;Searching for:&quot;, query)&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background&quot;&gt;&#10;      &lt;Header /&gt;&#10;      &lt;Hero onSearch={handleSearch} /&gt;&#10;      &lt;PopularItems /&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { Header } from &quot;@/components/header&quot;&#10;import { Hero } from &quot;@/components/hero&quot;&#10;import { PopularItems } from &quot;@/components/popular-items&quot;&#10;&#10;export default function HomePage() {&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background&quot;&gt;&#10;      &lt;Header /&gt;&#10;      &lt;Hero /&gt;&#10;      &lt;PopularItems /&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>